# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Computer {
  ID: String!
  macAddress: String!
  hostname: String!
  storagePath: String!
  name: String!
  user: User!
  createdDate: DateTime
  modifiedDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  ID: String!
  name: String!
  folder: Folder
  url: String!
  fileType: String!
  ownerID: String!
  owner: User!
  isTrash: Boolean!
  isPublic: Boolean!
  fileSize: Float!
  sharedUsers: [User!]
  readonlyUsers: [User!]
  starredUsers: [User!]
  createdDate: DateTime
  modifiedDate: DateTime
}

type Folder {
  ID: String!
  name: String!
  rootFolder: Folder
  files: [File!]
  subFolders: [Folder!]
  ownerID: String
  owner: User
  path: String!
  isTrash: Boolean!
  sharedUsers: [User!]
  readonlyUsers: [User!]
  isPublic: Boolean!
  starredUsers: [User!]
  createdDate: DateTime
  modifiedDate: DateTime
}

type Package {
  ID: Float!
  price: Float!
  name: String!
  maxStorage: Float!
  detail: String!
}

type User {
  ID: String!
  name: String!
  email: String!
  password: String!
  rootFolder: Folder
  avatar: String
  currentPackage: Package!
  storageUsed: Float!
  stripeCustomerID: String!
  computers: [Computer!]
}

type PeopleWithAccessResponse {
  sharedUsers: [User!]!
  readonlyUsers: [User!]!
  owner: User!
  isPublic: Boolean!
}

type GetFoldersByOwnerIDPaginationResponse {
  results: [Folder!]!
  hasMore: Boolean!
}

type SearchFilesAndFoldersResponse {
  folders: [Folder!]
  files: [File!]
}

type UserSearchPaginationResponse {
  results: [User!]!
  hasMore: Boolean!
}

type NewUserReturn {
  name: String!
  email: String!
  accessToken: String!
}

type Query {
  getMe: User!
  getAllUsers: [User!]!
  getUserByID(ID: String!): User!
  getFoldersOfFolder(folderID: String!): [Folder!]!
  getUserFiles: [File!]!
  getUsersBySearchPagination(search: String!, page: Float!, limit: Float!): UserSearchPaginationResponse!
  getUserTrashFolder: [Folder!]!
  getArrayOfRootFoldersName(folderID: String!): [Folder!]!
  getPeopleWithAccessToFolder(folderID: String!): PeopleWithAccessResponse!
  getUserSharedFolders: [Folder!]!
  getStarredFolders: [Folder!]!
  getAllUserFoldersPagination(search: String!, page: Float!, limit: Float!): GetFoldersByOwnerIDPaginationResponse!
  searchFilesAndFolders(search: String!): SearchFilesAndFoldersResponse!
  getFolderDetail(folderID: String!): Folder!
  getAllFilesAndFoldersOfUser: SearchFilesAndFoldersResponse!
  getFileByID(ID: String!): File!
  getFilesByFolder(folderID: String!): [File!]!
  getUserTrashFiles: [File!]!
  getPeopleWithAccessToFile(fileID: String!): PeopleWithAccessResponse!
  getFileByIDWithAccess(fileID: String!): File!
  getUserSharedFiles: [File!]!
  getStarredFiles: [File!]!
  getFileDetail(fileID: String!): File!
  getAllPackages: [Package!]!
  getComputerByMacAddress(macAddress: String!): Computer!
  getUserComputers: [Computer!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  signup(email: String!, password: String!, name: String!): NewUserReturn!
  updateUser(input: UpdateUserPayload!): User!
  createFolder(input: NewFolderInput!): Folder!
  uploadFolder(input: UploadFolderInput!): String!
  moveFolderToTrash(folderID: String!): String!
  moveFolderOutOfTrash(folderID: String!): String!
  deleteFolder(folderID: String!): String!
  addSharedUserToFolder(folderID: String!, sharedUserIDs: [String!]!, shouldSendMail: Boolean!, userMessage: String): String!
  addUserToFolderReadOnlyUsers(folderID: String!, readOnlyUserIDs: [String!]!, shouldSendMail: Boolean!, userMessage: String): String!
  setGeneralFolderAccess(folderID: String!, isPublic: Boolean!): String!
  removeUserFromFolder(folderID: String!, targetUserID: String!): String!
  changeUserRoleInFolder(folderID: String!, targetUserID: String!, targetRole: String!): String!
  emptyUserTrash: String!
  starFolder(folderID: String!): String!
  unstarFolder(folderID: String!): String!
  renameFolder(folderID: String!, name: String!): String!
  makeCopyOfFolder(folderID: String!): String!
  moveFolder(folderID: String!, targetFolderID: String!): String!
  uploadFile(file: Upload!, folderID: String!): File!
  moveFileToTrash(fileID: String!): File!
  restoreFileFromTrash(fileID: String!): File!
  deleteFile(fileID: String!): String!
  addUsersToReadonlyFile(fileID: String!, readonlyUserIDs: [String!]!, shouldSendMail: Boolean!, userMessage: String): String!
  addUsersToSharedUserFile(fileID: String!, sharedUserIDs: [String!]!, shouldSendMail: Boolean!, userMessage: String): String!
  changeUserRoleInFile(fileID: String!, targetUserID: String!, targetRole: String!): String!
  removeUserFromFile(fileID: String!, targetUserID: String!): String!
  setGeneralAccessOfFile(fileID: String!, isPublic: Boolean!): String!
  starFile(fileID: String!): String!
  unstarFile(fileID: String!): String!
  renameFile(fileID: String!, newName: String!): String!
  makeCopyOfFile(fileID: String!): String!
  moveFileToNewFolder(fileID: String!, targetFolderID: String!): String!
  bulkCreatePackages: String!
  createCheckoutSession(packageId: Float!): String!
  connectComputer(input: ConnectComputerInput!): Computer!
  removeComputer(macAddress: String!): String!
  updateComputerStoragePath(macAddress: String!, storagePath: String!): Computer!
}

input UpdateUserPayload {
  name: String!
  avatar: String!
}

input NewFolderInput {
  name: String!
  rootFolderID: String
}

input UploadFolderInput {
  folder: UploadFolder!
  rootFolderID: String!
}

input UploadFolder {
  files: [Upload!]
  folders: [UploadFolder!]
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ConnectComputerInput {
  macAddress: String!
  hostname: String!
  storagePath: String!
  name: String!
}